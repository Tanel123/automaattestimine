package repository;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import org.json.JSONException;

import model.CurrentWeatherReport;
import model.ThreeDaysWeatherReport;
import model.WeatherRequest;
import testHelpers.OWResponceDummy;
import utility.InputReader;
import utility.OutputWriter;
import utility.UpdateWeatherDataInFiles;;

public class OutputWriterTaskTest {
	
	public void testWriter() throws JSONException{
		/*
		OutputWriter outputWriterMock = mock(OutputWriter.class);
		
		OWResponceDummy responceDummy = new OWResponceDummy();
		CurrentWeatherReport currentWeatherReportDummy = responceDummy.createCurrentWeatherDummy();
		ThreeDaysWeatherReport threeDaysWeatherReportDummy = responceDummy.createThreeDaysWeatherReportDummy();
	            
	    //when(outputWriterMock.writeToFile(any(CurrentWeatherReport.class, ThreeDaysWeatherReport.class, String.class)));
	     * 	     */
		
		// create the mock
		OutputWriter outputWriterMock = mock(OutputWriter.class);
		
		OWResponceDummy responceDummy = new OWResponceDummy();
		CurrentWeatherReport currentWeatherReportDummy = responceDummy.createCurrentWeatherDummy();
		ThreeDaysWeatherReport threeDaysWeatherReportDummy = responceDummy.createThreeDaysWeatherReportDummy();

		// call the method under test and pass in the mock 

		// verify the intended behaviour
		verify(outputWriterMock).writeToFile(currentWeatherReportDummy, threeDaysWeatherReportDummy, UpdateWeatherDataInFiles.OUTPUT_PATH);
		//verify(outputWriterMock).close();
	}
}
